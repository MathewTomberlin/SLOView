name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PROJECT_ID: slo-view-app
  REGION: us-west1
  BUCKET_NAME: slo-view-frontend
  BACKEND_SERVICE_NAME: slo-view-backend

jobs:
  # Frontend CI
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./slo-view-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: slo-view-frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: slo-view-frontend/build/
        retention-days: 1

  # Backend CI
  backend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./slo-view-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
        cache-dependency-path: slo-view-backend/pom.xml
    
    - name: Run tests
      run: mvn test
    
    - name: Build application
      run: mvn clean package -DskipTests
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: slo-view-backend/target/*.jar
        retention-days: 1

  # Deploy to staging (develop branch)
  deploy-staging:
    needs: [frontend-ci, backend-ci]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: slo-view-frontend/build/
    
    - name: Deploy backend to staging
      run: |
        # Force new revision by adding timestamp
        TIMESTAMP=$(date +%s)
        gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }}-staging \
          --source slo-view-backend \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5 \
          --set-env-vars ENVIRONMENT=staging,DB_HOST=${{ secrets.DB_HOST }},DB_PORT=${{ secrets.DB_PORT }},DB_USERNAME=${{ secrets.DB_USERNAME }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_NAME=${{ secrets.DB_NAME }},DEPLOY_TIMESTAMP=$TIMESTAMP
    
    - name: Deploy frontend to staging
      run: |
        gsutil -m rsync -r -d slo-view-frontend/build/ gs://${{ env.BUCKET_NAME }}-staging/
    
    - name: Comment deployment URLs
      uses: actions/github-script@v7
      with:
        script: |
          const backendUrl = `https://${{ env.BACKEND_SERVICE_NAME }}-staging-${{ env.PROJECT_ID }}.a.run.app`;
          const frontendUrl = `https://storage.googleapis.com/${{ env.BUCKET_NAME }}-staging/index.html`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Staging Deployment Complete!**
            
            **Backend:** ${backendUrl}
            **Frontend:** ${frontendUrl}
            
            You can test the staging deployment at the URLs above.`
          });

  # Deploy to production (main branch)
  deploy-production:
    needs: [frontend-ci, backend-ci]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: slo-view-frontend/build/
    
    - name: Deploy backend to production
      run: |
        # Force new revision by adding timestamp
        TIMESTAMP=$(date +%s)
        gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
          --source slo-view-backend \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars ENVIRONMENT=production,DB_HOST=${{ secrets.DB_HOST }},DB_PORT=${{ secrets.DB_PORT }},DB_USERNAME=${{ secrets.DB_USERNAME }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_NAME=${{ secrets.DB_NAME }},DEPLOY_TIMESTAMP=$TIMESTAMP
    
    - name: Deploy frontend to production
      run: |
        gsutil -m rsync -r -d slo-view-frontend/build/ gs://${{ env.BUCKET_NAME }}/
    
    - name: Verify deployment
      run: |
        # Get service URL
        SERVICE_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        
        # Test backend health
        curl -f $SERVICE_URL/health
        
        # Test frontend
        curl -f -I https://storage.googleapis.com/${{ env.BUCKET_NAME }}/index.html
    
    - name: Create deployment summary
      run: |
        echo "ðŸŽ‰ **Production Deployment Complete!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Backend:** https://${{ env.BACKEND_SERVICE_NAME }}-${{ env.PROJECT_ID }}.a.run.app" >> $GITHUB_STEP_SUMMARY
        echo "**Frontend:** https://storage.googleapis.com/${{ env.BUCKET_NAME }}/index.html" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… All health checks passed!" >> $GITHUB_STEP_SUMMARY
